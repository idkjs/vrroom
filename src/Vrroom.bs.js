// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function string(prim) {
  return prim;
}

function $$int(n) {
  return String(n);
}

function $$float(f) {
  return f.toString();
}

function any(v) {
  return String(v);
}

var $$Text = {
  string: string,
  $$int: $$int,
  $$float: $$float,
  any: any
};

var nothing = null;

var nbsp = "'\\u00a0'";

function join(items) {
  return $$String.concat(" ", List.filter(function (param) {
                    return "" !== param;
                  })(items));
}

function if_(cond, cls) {
  if (cond) {
    return cls;
  } else {
    return "";
  }
}

function fromOption(cls) {
  if (cls !== undefined) {
    return cls;
  } else {
    return "";
  }
}

var ClassName = {
  join: join,
  if_: if_,
  fromOption: fromOption
};

var Helpers = {
  $$Text: $$Text,
  text: string,
  nothing: nothing,
  nbsp: nbsp,
  ClassName: ClassName
};

function Vrroom$Control$Map(Props) {
  var items = Props.items;
  var emptyOpt = Props.empty;
  var children = Props.children;
  var empty = emptyOpt !== undefined ? Caml_option.valFromOption(emptyOpt) : nothing;
  return React.createElement(React.Fragment, {
              children: items.length !== 0 ? $$Array.map(children, items) : empty
            });
}

var $$Map = {
  make: Vrroom$Control$Map
};

function Vrroom$Control$MapList(Props) {
  var items = Props.items;
  var emptyOpt = Props.empty;
  var children = Props.children;
  var empty = emptyOpt !== undefined ? Caml_option.valFromOption(emptyOpt) : nothing;
  return React.createElement(Vrroom$Control$Map, {
              items: $$Array.of_list(items),
              empty: empty,
              children: children
            });
}

var MapList = {
  make: Vrroom$Control$MapList
};

function Vrroom$Control$If(Props) {
  var children = Props.children;
  var cond = Props.cond;
  if (cond) {
    return children;
  } else {
    return nothing;
  }
}

var If = {
  make: Vrroom$Control$If
};

function Vrroom$Control$IfSome(Props) {
  var option = Props.option;
  var children = Props.children;
  if (option !== undefined) {
    return Curry._1(children, Caml_option.valFromOption(option));
  } else {
    return nothing;
  }
}

var IfSome = {
  make: Vrroom$Control$IfSome
};

var Control = {
  $$Map: $$Map,
  MapList: MapList,
  If: If,
  IfSome: IfSome
};

var text = string;

exports.Helpers = Helpers;
exports.$$Text = $$Text;
exports.text = text;
exports.nothing = nothing;
exports.nbsp = nbsp;
exports.ClassName = ClassName;
exports.Control = Control;
/* nothing Not a pure module */
